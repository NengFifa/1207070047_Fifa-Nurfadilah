# -*- coding: utf-8 -*-
"""p5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17bxivHnVyk_aoL1UK6Xu4_jkHJAZDEFO
"""

#Import Library
import numpy as np #Mengimpor library NumPy yang digunakan untuk operasi numerik
import imageio #Mengimpor library imageio yang digunakan untuk membaca gambar
import matplotlib.pyplot as plt #Mengimpor library imageio yang digunakan untuk membaca gambar
#Membaca gambar
img1 = imageio.imread("nana.jpg") #membaca gambar kemudian disimpan dalam variabel img1
img2 = imageio.imread("nini.jpg")##membaca gambar kemudian disimpan dalam variabel img2
#Percobaan 1 - Cropping Image
img1Cropped = img1.copy() #Membuat salinan dari gambar untuk pengolahan selanjutnya
img1Cropped = img1Cropped[100:800,0:800]#Memotong gambar dengan batas baris 100-800 dan batas kolom 0-800

img2Cropped = img2.copy()#Membuat salinan dari gambar untuk pengolahan selanjutnya
img2Cropped = img2Cropped[100:250,300:500]#Memotong gambar dengan batas baris 100-250 dan batas kolom 300-500

print('img1 Ori Shape : ',img1.shape) #Menampilkan dimensi (bentuk) gambar
print('img2 Crop Shape : ',img1Cropped.shape) #Menampilkan dimensi (bentuk) gambar setelah dipotong

print('img2 Ori Shape : ',img2.shape)#Menampilkan dimensi (bentuk) gambar
print('img2 Crop Shape : ',img2Cropped.shape)#Menampilkan dimensi (bentuk) gambar setelah dipotong

fig, axes = plt.subplots(2, 2, figsize=(12, 12))#Membuat objek gambar dan sumbu menggunakan subplots dengan ukuran 2x2 dan ukuran total gambar 12x12.
ax = axes.ravel()#Membentuk array 1 dimensi dari objek sumbu

ax[0].imshow(img1)#enampilkan gambar img1 pada sumbu pertama
ax[0].set_title("Citra Input 1")#memberi judul

ax[1].imshow(img2, cmap='gray') #Menampilkan gambar img2 pada sumbu kedua dengan menggunakan colormap 'gray' untuk gambar berwarna keabuan.
ax[1].set_title('Citra Input 2')#memberi judul

ax[2].imshow(img1Cropped)#menampilkan gambar yang telah di crop
ax[2].set_title("Citra Output 1")

ax[3].imshow(img2Cropped, cmap='gray')#menampilkan gambar yang telah di crop
ax[3].set_title('Citra Output 2')

#Import dependency
import numpy as np
import imageio
import matplotlib.pyplot as plt
#Membaca gambar
img = imageio.imread("nana.jpg")
#Mendapatkan resolusi dan type dari gambar
img_height = img.shape[0]#mendapatkan tinggi gambar (jumlah baris) dan menyimpannya dalam variabel 
img_width = img.shape[1]#mendapatkanllebar gambar (jumlah kolom) dan menyimpannya dalam variabel 
img_channel = img.shape[2]#Mendapatkan jumlah saluran warna gambar (misalnya, 3 untuk gambar berwarna RGB) dan menyimpannya dalam variabel img_channel
img_type = img.dtype#Mendapatkan tipe data gambar 
#Brightness Grayscale
#Membuat variabel img_brightness untuk menampung hasil
img_brightness = np.zeros(img.shape, dtype=np.uint8)#Membuat array dengan ukuran yang sama dengan gambar img dan tipe data uint8 yang akan digunakan untuk menyimpan gambar hasil peningkatan kecerahan.
#Melakukan penambahan brightness dengan nilai yg menjadi parameter
def brighter(nilai):#embuat sebuah fungsi dengan nama brighter yang mengambil satu parameter nilai sebagai nilai peningkatan kecerahan yang diinginkan.
    for y in range(0, img_height):#melakukan iterasi melalui setiap baris (y) dari gambar.
        for x in range(0, img_width):#melakukan iterasi melalui setiap baris (x) dari gambar.
            red = img[y][x][0]#Mendapatkan nilai komponen warna merah, hijau, dan biru (RGB) dari piksel pada posisi (x, y).
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3#Menghitung rata-rata nilai komponen warna RGB untuk mendapatkan kecerahan piksel dalam skala keabuan.
            gray += nilai#menambahkan nilai peningkatan kecerahan yang diberikan ke kecerahan piksel.
            if gray > 255:#mengatur kecerahan piksel menjadi 255 jika lebih dari 255
                gray = 255
            if gray < 0:#mengatur kecerahan piksel menjadi 0 jika kurang dari 0
                gray = 0
            img_brightness[y][x] = (gray, gray, gray)#Menetapkan nilai kecerahan piksel
#Menampilkan beberapa hasil dengan nilai brightness -100 dan 100
brighter(-100)#Memanggil fungsi brighter dengan nilai peningkatan kecerahan -100
plt.imshow(img_brightness)#memanggil gambar
plt.title("Brightness -100")#meberi judul
plt.show()#menampilkan gambar

brighter(100)##Memanggil fungsi brighter dengan nilai peningkatan kecerahan 100
plt.imshow(img_brightness)
plt.title("Brightness 100")
plt.show()

#Brightness RGB
#Membuat variabel img_rgbbrightness untuk menampung hasil
img_rgbbrightness = np.zeros(img.shape, dtype=np.uint8)#Membuat array dengan ukuran yang sama dengan gambar img dan tipe data uint8 yang akan digunakan untuk menyimpan gambar hasil peningkatan kecerahan dengan skala RGB.
#Melakukan penambahan brightness dengan nilai yg menjadi parameter
def rgbbrighter(nilai):#membuat sebuah fungsi dengan nama rgbbrighter yang mengambil satu parameter nilai sebagai nilai peningkatan kecerahan yang diinginkan.
   for y in range(0, img_height):#melakukan iterasi melalui setiap baris (y) dari gambar.
        for x in range(0, img_width):#melakukan iterasi melalui setiap baris (x) dari gambar.
            red = img[y][x][0]#Mendapatkan nilai komponen warna merah dari piksel pada posisi (x, y).
            red += nilai#Menambahkan nilai peningkatan kecerahan yang diberikan ke komponen warna merah (red).
            if red > 255:#Jika nilai komponen warna merah (red) melebihi nilai maksimum 255, atur nilainya menjadi 255.
                red = 255
            if red < 0:#jika nilai komponen warna merah kurang dari 0, atur nilainya menjadi 0.
                red = 0
            green = img[y][x][1]#Mendapatkan nilai komponen warna hijau dari piksel pada posisi (x, y).
            green += nilai#Menambahkan nilai peningkatan kecerahan yang diberikan ke komponen warna hijau
            if green > 255:#Jika nilai komponen warna hijau melebihi nilai maksimum 255, atur nilainya menjadi 255.
                green = 255
            if green < 0:#jika nilai komponen warna hijau kurang dari 0, atur nilainya menjadi 0.
                green = 0
            blue = img[y][x][2]#Mendapatkan nilai komponen warna biru (RGB) dari piksel pada posisi (x, y).
            blue += nilai#Menambahkan nilai peningkatan kecerahan yang diberikan ke komponen warna biru
            if blue > 255:#Jika nilai komponen warna biru melebihi nilai maksimum 255, atur nilainya menjadi 255.
                blue = 255
            if blue < 0:#jika nilai komponen warna biru (blue) kurang dari 0, atur nilainya menjadi 0.
                blue = 0
            img_rgbbrightness[y][x] = (red, green, blue)#Menetapkan nilai kecerahan piksel yang sudah diubah dengan komponen warna merah (red), hijau (green), dan biru (blue)
#Menampilkan beberapa hasil dengan nilai brightness -100 dan 100
rgbbrighter(-100)#Memanggil fungsi rgbbrighter dengan nilai peningkatan kecerahan -100 
plt.imshow(img_rgbbrightness)
plt.title("Brightness -100")
plt.show()

rgbbrighter(100)#Memanggil fungsi rgbbrighter dengan nilai peningkatan kecerahan 100 
plt.imshow(img_rgbbrightness)
plt.title("Brightness 100")
plt.show()

#Contrass
#Membuat variabel img_contrass untuk menampung hasil
img_contrass = np.zeros(img.shape, dtype=np.uint8)
#Melakukan penambahan contrass dengan nilai yg menjadi parameter
def contrass(nilai):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3#Menghitung rata-rata nilai komponen warna RGB untuk mendapatkan kecerahan piksel dalam skala keabuan.
            gray *= nilai#Mengalikan nilai kecerahan piksel dalam skala keabuan dengan nilai peningkatan kecerahan yang diberikan.
            if gray > 255:
                gray = 255
            img_contrass[y][x] = (gray, gray, gray)
#Menampilkan beberapa hasil dengan nilai contrass 50 dan 100
contrass(2)
plt.imshow(img_contrass)
plt.title("Contrass 2")
plt.show()

contrass(3)
plt.imshow(img_contrass)
plt.title("Contrass 3")
plt.show()

#penjelasan sama seperti program sebelumnya

#Contrass Autolevel
#Membuat variabel img_contrass untuk menampung hasil
img_autocontrass = np.zeros(img.shape, dtype=np.uint8)
#Melakukan penambahan contrass secara otomatis
def autocontrass():
    xmax = 300 #melakukan iterasi melalui setiap piksel pada gambar untuk mencari nilai minimal (xmax) dan nilai maksimal (xmin) dari tingkat keabuan piksel.
    xmin = 0 
    d = 0 
# Mendapatkan nilai d, dimana nilai d ini akan berpengaruh pada hitungan
# untuk mendapatkan tingkat kontras
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3 
            if gray < xmax:
                xmax = gray
            if gray > xmin:
                xmin = gray
    d = xmin-xmax #perhitungan untuk mendapatkan tingkat kontras.
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = int(float(255/d) * (gray-xmax))#Menghitung tingkat kontras baru pada tingkat keabuan piksel dengan menggunakan rumus
            img_autocontrass[y][x] = (gray, gray, gray)
#Menampilkan hasil autolevel contrass
autocontrass()
plt.imshow(img_autocontrass)
plt.title("Contrass Autolevel")
plt.show()

#penjelasan sama dengan program sebelumnya