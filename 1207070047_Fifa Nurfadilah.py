# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12LLdoN67EArd_GcKyEZME8Tkf6KVSUnT
"""

#import library
import numpy as np #NumPy untuk manipulasi array
import imageio #umPy untuk manipulasi array
import matplotlib.pyplot as plt #matplotlib.pyplot untuk menampilkan gambar.
#Membaca gambar
img = imageio.imread("OIG.jpeg") #membaca gambar menggunakan imread hasilnya disimpan dalam variable img
#Mendapatkan resolusi dan type dari gambar
img_height = img.shape[0]#menunjukkan tinggi gambar dalam piksel
img_width = img.shape[1]#menunjukkan lebar gambar dalam piksel
img_channel = img.shape[2]#menunjukkan jumlah saluran warna pada gambar
img_type = img.dtype#menunjukkan jenis data gambar
#Membuat variabel dengan resolusi dan tipe yang sama seperti gambar
img_flip_horizontal = np.zeros(img.shape, img_type)#menyimpan hasil pembalikan horizontal dan vertical dari gambar
img_flip_vertical = np.zeros(img.shape, img_type) #np.zeros digunakan untuk membuat array dengan nilai awal 0.
#Membalik gambar secara horizontal
for y in range(0, img_height):#mengiterasi melalui indeks baris piksel.
    for x in range(0, img_width):#mengiterasi melalui indeks kolom piksel
        for c in range(0, img_channel):#mengiterasi melalui indeks saluran warna
            img_flip_horizontal[y][x][c] = img[y][img_width-1-x][c]
#Membalik gambar secara vertical
for y in range(0, img_height):
    for x in range(0, img_width):
        for c in range(0, img_channel):
            img_flip_vertical[y][x][c] = img[img_height-1-y][x][c]
#Menampilkan hasil balik gambar
plt.imshow(img_flip_horizontal) #menampilkan gambar horizontal
plt.title("Flip Horizontal") #memberi judul pada gambar
plt.show() #menampilkan gambar
plt.imshow(img_flip_vertical) #menampilkan gambar vertikal
plt.title("Flip Vertical") #memberi judul pada gambar
plt.show() #menampilkan gambar

#Import Library
import numpy as np
import imageio
import matplotlib.pyplot as plt
#Membaca Gambar
img = imageio.imread("OIG.jpeg")
img_height = img.shape[0]
img_width = img.shape[1]
img_channel = img.shape[2]
img_grayscale = np.zeros(img.shape, dtype=np.uint8)

#Merubah gambar menjadi Grayscale
for y in range(0, img_height): #perulangan untuk setiap baris (koordinat y) dari gambar.
    for x in range(0, img_width):#perulangan bersarang untuk setiap kolom (koordinat x) dari gambar.
        red = img[y][x][0] #nilai  channel red dari piksel pada posisi (x, y) 
        green = img[y][x][1]#nilai  channel green dari piksel pada posisi (x, y) 
        blue = img[y][x][2]#nilai  channel blue dari piksel pada posisi (x, y) 
        gray = (int(red) + int(green) + int(blue)) / 3#menghitung nilai keabuan (grayscale) untuk piksel pada posisi (x, y) dengan rumus
        img_grayscale[y][x] = (gray, gray, gray) #mengassign nilai keabuan ke setiap saluran (merah, hijau, dan biru) dari piksel yang sesuai di dalam array
        
plt.imshow(img_grayscale)
plt.title("Grayscale")
plt.show()



#Menampilkan Histogram Gambar Grayscale
#Membuat variabel untuk menyimpan data gambar
hg = np.zeros((256)) #membuat array hg dengan ukuran 256 yang berisi nol
#Mengisi setiap nilai dalam array hg dengan 0
for x in range(0, 256): #memulai perulangan dari 0 hingga 255
    hg[x] = 0
#Menghitung nilai dari gambar
for y in range(0, img_height): #mengambil nilai keabuan dari piksel pada posisi (x, y) dari array 
    for x in range(0, img_width):
        gray = img_grayscale[y][x][0]
        hg[gray] += 1 #menambahkan 1 ke elemen keabuan yang sesuai di array hg.
#Menampilkan Histogram
#plt.figure(figsize=(20, 6))
#plt.plot(hg, color="black", linewidth=2.0)
#plt.show()

bins = np.linspace(0, 256, 100)
plt.hist(hg, bins, color="black", alpha=0.5)
plt.title("Histogram")
plt.show()

#Menampilkan Histogram Gambar RGB
#Membuat variabel untuk menyimpan data gambar
hgr = np.zeros((256)) #menyimpan jumlah piksel dengan intensitas merah tertentu dalam gambar.
hgg = np.zeros((256))#menyimpan jumlah piksel dengan intensitas hijau tertentu dalam gambar.
hgb = np.zeros((256))#menyimpan jumlah piksel dengan intensitas biru tertentu dalam gambar.
hgrgb = np.zeros((768))#menyimpan jumlah piksel dengan intensitas merah,hijau,biru tertentu dalam gambar.
##Mengisi setiap nilai dalam array hg dengan 0
for x in range(0, 256):
    hgr[x] = 0
    hgg[x] = 0
    hgb[x] = 0
    
for x in range(0, 768):
    hgrgb[x] = 0
#Menghitung nilai dari gambar
for x in range(0, 256):
    hgr[x] = 0
    hgg[x] = 0
    hgb[x] = 0
    
for x in range(0, 768):
    hgrgb[x] = 0

# th = int(256/64)
temp = [0]
for y in range(0, img.shape[0]):
    for x in range(0, img.shape[1]):
        red = int(img[y][x][0])
        green = int(img[y][x][1])
        blue = int(img[y][x][2])
        green = green + 256 #menambahkan nilai 512 ke intensitas biru untuk menggeser nilai ke dalam rentang yang sesuai 
        blue = blue + 512 #menambahkan nilai 512 ke intensitas biru untuk menggeser nilai ke dalam rentang yang sesuai 
#         temp.append(green)
        hgrgb[red] += 1 #menambahkan nilai 512 ke intensitas merah untuk menggeser nilai ke dalam rentang yang sesuai 
        hgrgb[green] += 1 #hijau
        hgrgb[blue] += 1 #biru

binsrgb = np.linspace(0, 768, 100)
plt.hist(hgrgb, binsrgb, color="black", alpha=0.5)
# plt.plot(hgrgb)
plt.title("Histogram Red Green Blue")
plt.show()

#Menampilkan Histogram
for y in range(0, img_height):
    for x in range(0, img_width):
        red = img[y][x][0]
        green = img[y][x][1]
        blue = img[y][x][2]
        hgr[red] += 1
        hgg[green] += 1
        hgb[blue] += 1

bins = np.linspace(0, 256, 100) #batasan bin untuk histogram.
plt.hist(hgr, bins, color="red", alpha=0.5) #fungsi plt.hist() dari Matplotlib untuk menggambar histogram
#hgr adalah array yang berisi jumlah piksel dengan intensitas merah tertentu
#color="red" digunakan untuk memberikan warna merah pada histogram.
#alpha=0.5 digunakan untuk mengatur tingkat transparansi histogram.
plt.title("Histogram Red")
plt.show()

plt.hist(hgg, bins, color="green", alpha=0.5)
plt.title("Histogram Green")
plt.show()

plt.hist(hgb, bins, color="blue", alpha=0.5)
plt.title("Histogram Blue")
plt.show()

#Menampilkan Histogram Kumulatif
hgk = np.zeros((256))#digunakan untuk menyimpan jumlah piksel dengan intensitas keabuan tertentu.
c = np.zeros((256))#mengisi semua elemennya dengan nilai 0

for x in range(0, 256): #melakukan inisialisasi nilai awal pada array hgk dan c dengan 0.
    hgk[x] = 0
    c[x] = 0

for y in range(0, img_height): #mengiterasi setiap piksel dalam gambar grayscale
    for x in range(0, img_width):
        gray = img_grayscale[y][x][0]
        hgk[gray] += 1
                
c[0] = hgk[0] #mengatur nilai awal dari array c dengan nilai pertama dari array hgk, yaitu jumlah piksel dengan intensitas keabuan 0.
for x in range(1, 256):
     c[x] = c[x-1] + hgk[x] #menghitung kumulatif jumlah piksel pada array c.

hmaxk = c[255] #kumulatif jumlah piksel maksimum.

for x in range(0, 256):
    c[x] = 190 * c[x] / hmaxk #mengubah nilai kumulatif menjadi rentang nilai baru antara 0 hingga 190.

plt.hist(c, bins, color="black", alpha=0.5)
plt.title("Histogram Grayscale Kumulatif")
plt.show()

#Menampilkan Histogram Hequalisasi
hgh = np.zeros((256))#Membuat array hgh dengan ukuran 256 dan diinisialisasi dengan nilai 0.
h = np.zeros((256))#Membuat array hgh dengan ukuran 256 dan diinisialisasi dengan nilai 0.
c = np.zeros((256)) #Membuat array hgh dengan ukuran 256 dan diinisialisasi dengan nilai 0.

for x in range(0, 256): #Melakukan iterasi untuk setiap nilai x dari 0 hingga 255.
    hgh[x] = 0 #Mengatur nilai elemen x dalam array hgh menjadi 0.
    h[x] = 0
    c[x] = 0

for y in range(0, img_height):#Melakukan iterasi untuk setiap nilai y dari 0 hingga tinggi gambar.
    for x in range(0, img_width): #Melakukan iterasi untuk setiap nilai x dari 0 hingga lebar gambar.
        gray = img_grayscale[y][x][0]#Mengambil nilai intensitas keabuan pada posisi (y, x) dalam gambar.
        hgh[gray] += 1#Meningkatkan jumlah piksel dengan intensitas keabuan gray dalam array hgh.
                
h[0] = hgh[0] #menyimpan jumlah piksel pada intensitas keabuan 0 dari hgh ke elemen pertama array h.
for x in range(1, 256):#melakukan iterasi untuk setiap nilai x dari 1 hingga 255.
     h[x] = h[x-1] + hgh[x]#Menghitung kumulatif jumlah piksel pada setiap intensitas keabuan dan menyimpannya dalam array h.

for x in range(0, 256):#Melakukan iterasi untuk setiap nilai x dari 0 hingga 255.
     h[x] = h[x] / img_height / img_width #Mengnormalisasi nilai intensitas keabuan dalam array h dengan membaginya dengan jumlah total piksel dalam gambar.

for x in range(0, 256):
    hgh[x] = 0#Mengatur nilai elemen x dalam array hgh menjadi 0.
    
for y in range(0, img_height):
    for x in range(0, img_width):
        gray = img_grayscale[y][x][0]#mengambil nilai intensitas keabuan pada posisi (y, x) dalam gambar.
        gray = h[gray] * 255#engubah nilai intensitas keabuan dengan memetakan nilai melalui fungsi transform
        hgh[int(gray)] += 1

c[0] = hgh[0]
for x in range(1, 256):
     c[x] = c[x-1] + hgh[x] #menghitung kumulatif jumlah piksel pada array c.

hmaxk = c[255]

for x in range(0, 256):
    c[x] = 190 * c[x] / hmaxk #mengubah nilai kumulatif menjadi rentang nilai baru antara 0 hingga 190.

plt.hist(c, bins, color="black", alpha=0.5)
plt.title("Histogram Grayscale Hequalisasi")
plt.show()

#Inversi, Transformasi Logaritmik, Transformasi Powerlaw
#Import Library
import numpy as np
import imageio
import matplotlib.pyplot as plt
#Membaca Gambar
img = imageio.imread("OIG.jpeg")
img_height = img.shape[0]
img_width = img.shape[1]
img_channel = img.shape[2]
#Inversi
#Membuat variabel img_inversi
img_inversi = np.zeros(img.shape, dtype=np.uint8)
#Membuat fungsi untuk inversi grayscale
def inversi_grayscale(nilai):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = nilai - gray
            img_inversi[y][x] = (gray, gray, gray)
#Membuat fungsi untuk inversi rgb
def inversi_rgb(nilai):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            red = nilai - red
            green = img[y][x][1]
            green = nilai - green
            blue = img[y][x][2]
            blue = nilai - blue
            img_inversi[y][x] = (red, green, blue)
#Menampilkan hasil inversi
inversi_grayscale(255)
plt.imshow(img_inversi)
plt.title("Inversi Grayscale")
plt.show()

inversi_rgb(255)
plt.imshow(img_inversi)
plt.title("Inversi RGB")
plt.show()

#Log
#Membuat variabel img_log untuk menampung hasil
img_log = np.zeros(img.shape, dtype=np.uint8)
#Mendefinisikan fungsi untuk log
def log(c):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = int(c * np.log(gray + 1))
            if gray > 255:
                gray = 255
            if gray < 0:
                gray = 0
            img_log[y][x] = (gray, gray, gray)
#Menampilkan hasil log
log(30)
plt.imshow(img_log)
plt.title("Log")
plt.show()

#Inversi & Log
#Membuat variabel img_inlog untuk menampung hasil
img_inlog = np.zeros(img.shape, dtype=np.uint8)
#Mendefinisikan fungsi untuk inversi log
def inlog(c):
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = int(c * np.log(255 - gray + 1))
            if gray > 255:
                gray = 255
            if gray < 0:
                gray = 0
            img_inlog[y][x] = (gray, gray, gray)
#Menampilkan hasil inversi log
inlog(30)
plt.imshow(img_inlog)
plt.title("Inversi & Log")
plt.show()

#Nth Power
#Membuat variabel img_nthpower untuk menampung hasil
img_nthpower = np.zeros(img.shape, dtype=np.uint8)
#Mendefinisikan fungsi untuk nth power
def nthpower(c, y):
    thc = c / 100
    thy = y / 100
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3
            gray = int(thc * pow(gray, thy))
            if gray > 255:
                gray = 255
            if gray < 0:
                gray = 0
            img_nthpower[y][x] = (gray, gray, gray)
#Menampilkan hasil
nthpower(50, 100)
plt.imshow(img_nthpower)
plt.title("Nth Power")
plt.show()

#Nth Root Power
#Membuat variabel img_nthrootpower
img_nthrootpower = np.zeros(img.shape, dtype=np.uint8)#Membuat array img_nthrootpower dengan dimensi yang sama dengan gambar awal, yang akan digunakan untuk menyimpan hasil transformasi nth root power.
#Membuat fungsi untuk nth root power
def nthrootpower(c, y):#Mendefinisikan fungsi nthrootpower yang akan melakukan transformasi nth root power pada gambar.
    thc = c / 100 #Menghitung nilai threshold untuk konstanta c sebagai pecahan dari 100.
    thy = y / 100 #konstanta y
    for y in range(0, img_height):
        for x in range(0, img_width):
            red = img[y][x][0]
            green = img[y][x][1]
            blue = img[y][x][2]
            gray = (int(red) + int(green) + int(blue)) / 3#rumus untuk menghitung nilai keabuan rata-rata dari komponen RGB.
            gray = int(thc * pow(gray, 1./thy)) #melakukan transformasi nth root power pada nilai keabuan dengan menggunakan konstanta thc dan eksponen thy.
            if gray > 255:
                gray = 255
            if gray < 0:
                gray = 0
            img_nthpower[y][x] = (gray, gray, gray) #Menyimpan nilai keabuan
#Menampilkan hasil
nthrootpower(50, 100)#Memanggil fungsi nthrootpower dengan memberikan nilai c=50 dan y=100 sebagai argumen.
plt.imshow(img_nthrootpower)
plt.title("Nth Root Power")
plt.show()